// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package spec

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MonkeyClient is the client API for Monkey service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MonkeyClient interface {
	// Sends a greeting
	GetAlbums(ctx context.Context, in *AlbumRequest, opts ...grpc.CallOption) (*AlbumReply, error)
}

type monkeyClient struct {
	cc grpc.ClientConnInterface
}

func NewMonkeyClient(cc grpc.ClientConnInterface) MonkeyClient {
	return &monkeyClient{cc}
}

func (c *monkeyClient) GetAlbums(ctx context.Context, in *AlbumRequest, opts ...grpc.CallOption) (*AlbumReply, error) {
	out := new(AlbumReply)
	err := c.cc.Invoke(ctx, "/spec.Monkey/GetAlbums", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MonkeyServer is the server API for Monkey service.
// All implementations must embed UnimplementedMonkeyServer
// for forward compatibility
type MonkeyServer interface {
	// Sends a greeting
	GetAlbums(context.Context, *AlbumRequest) (*AlbumReply, error)
	mustEmbedUnimplementedMonkeyServer()
}

// UnimplementedMonkeyServer must be embedded to have forward compatible implementations.
type UnimplementedMonkeyServer struct {
}

func (UnimplementedMonkeyServer) GetAlbums(context.Context, *AlbumRequest) (*AlbumReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAlbums not implemented")
}
func (UnimplementedMonkeyServer) mustEmbedUnimplementedMonkeyServer() {}

// UnsafeMonkeyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MonkeyServer will
// result in compilation errors.
type UnsafeMonkeyServer interface {
	mustEmbedUnimplementedMonkeyServer()
}

func RegisterMonkeyServer(s grpc.ServiceRegistrar, srv MonkeyServer) {
	s.RegisterService(&Monkey_ServiceDesc, srv)
}

func _Monkey_GetAlbums_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlbumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonkeyServer).GetAlbums(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spec.Monkey/GetAlbums",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonkeyServer).GetAlbums(ctx, req.(*AlbumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Monkey_ServiceDesc is the grpc.ServiceDesc for Monkey service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Monkey_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "spec.Monkey",
	HandlerType: (*MonkeyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAlbums",
			Handler:    _Monkey_GetAlbums_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "spec/monkey.proto",
}
