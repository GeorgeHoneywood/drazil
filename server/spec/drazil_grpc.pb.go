// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package spec

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DrazilClient is the client API for Drazil service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DrazilClient interface {
	ListArtists(ctx context.Context, in *ArtistsRequest, opts ...grpc.CallOption) (*ArtistsReply, error)
	ListAlbums(ctx context.Context, in *AlbumsRequest, opts ...grpc.CallOption) (*AlbumsReply, error)
	ListAllAlbums(ctx context.Context, in *AllAlbumsRequest, opts ...grpc.CallOption) (*AllAlbumsReply, error)
	ListSongs(ctx context.Context, in *SongsRequest, opts ...grpc.CallOption) (*SongsReply, error)
	Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchReply, error)
}

type drazilClient struct {
	cc grpc.ClientConnInterface
}

func NewDrazilClient(cc grpc.ClientConnInterface) DrazilClient {
	return &drazilClient{cc}
}

func (c *drazilClient) ListArtists(ctx context.Context, in *ArtistsRequest, opts ...grpc.CallOption) (*ArtistsReply, error) {
	out := new(ArtistsReply)
	err := c.cc.Invoke(ctx, "/spec.drazil/ListArtists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drazilClient) ListAlbums(ctx context.Context, in *AlbumsRequest, opts ...grpc.CallOption) (*AlbumsReply, error) {
	out := new(AlbumsReply)
	err := c.cc.Invoke(ctx, "/spec.drazil/ListAlbums", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drazilClient) ListAllAlbums(ctx context.Context, in *AllAlbumsRequest, opts ...grpc.CallOption) (*AllAlbumsReply, error) {
	out := new(AllAlbumsReply)
	err := c.cc.Invoke(ctx, "/spec.drazil/ListAllAlbums", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drazilClient) ListSongs(ctx context.Context, in *SongsRequest, opts ...grpc.CallOption) (*SongsReply, error) {
	out := new(SongsReply)
	err := c.cc.Invoke(ctx, "/spec.drazil/ListSongs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drazilClient) Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchReply, error) {
	out := new(SearchReply)
	err := c.cc.Invoke(ctx, "/spec.drazil/Search", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DrazilServer is the server API for Drazil service.
// All implementations must embed UnimplementedDrazilServer
// for forward compatibility
type DrazilServer interface {
	ListArtists(context.Context, *ArtistsRequest) (*ArtistsReply, error)
	ListAlbums(context.Context, *AlbumsRequest) (*AlbumsReply, error)
	ListAllAlbums(context.Context, *AllAlbumsRequest) (*AllAlbumsReply, error)
	ListSongs(context.Context, *SongsRequest) (*SongsReply, error)
	Search(context.Context, *SearchRequest) (*SearchReply, error)
	mustEmbedUnimplementedDrazilServer()
}

// UnimplementedDrazilServer must be embedded to have forward compatible implementations.
type UnimplementedDrazilServer struct {
}

func (UnimplementedDrazilServer) ListArtists(context.Context, *ArtistsRequest) (*ArtistsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListArtists not implemented")
}
func (UnimplementedDrazilServer) ListAlbums(context.Context, *AlbumsRequest) (*AlbumsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAlbums not implemented")
}
func (UnimplementedDrazilServer) ListAllAlbums(context.Context, *AllAlbumsRequest) (*AllAlbumsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAllAlbums not implemented")
}
func (UnimplementedDrazilServer) ListSongs(context.Context, *SongsRequest) (*SongsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSongs not implemented")
}
func (UnimplementedDrazilServer) Search(context.Context, *SearchRequest) (*SearchReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (UnimplementedDrazilServer) mustEmbedUnimplementedDrazilServer() {}

// UnsafeDrazilServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DrazilServer will
// result in compilation errors.
type UnsafeDrazilServer interface {
	mustEmbedUnimplementedDrazilServer()
}

func RegisterDrazilServer(s grpc.ServiceRegistrar, srv DrazilServer) {
	s.RegisterService(&Drazil_ServiceDesc, srv)
}

func _Drazil_ListArtists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArtistsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DrazilServer).ListArtists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spec.drazil/ListArtists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DrazilServer).ListArtists(ctx, req.(*ArtistsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Drazil_ListAlbums_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlbumsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DrazilServer).ListAlbums(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spec.drazil/ListAlbums",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DrazilServer).ListAlbums(ctx, req.(*AlbumsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Drazil_ListAllAlbums_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllAlbumsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DrazilServer).ListAllAlbums(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spec.drazil/ListAllAlbums",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DrazilServer).ListAllAlbums(ctx, req.(*AllAlbumsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Drazil_ListSongs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SongsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DrazilServer).ListSongs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spec.drazil/ListSongs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DrazilServer).ListSongs(ctx, req.(*SongsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Drazil_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DrazilServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spec.drazil/Search",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DrazilServer).Search(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Drazil_ServiceDesc is the grpc.ServiceDesc for Drazil service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Drazil_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "spec.drazil",
	HandlerType: (*DrazilServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListArtists",
			Handler:    _Drazil_ListArtists_Handler,
		},
		{
			MethodName: "ListAlbums",
			Handler:    _Drazil_ListAlbums_Handler,
		},
		{
			MethodName: "ListAllAlbums",
			Handler:    _Drazil_ListAllAlbums_Handler,
		},
		{
			MethodName: "ListSongs",
			Handler:    _Drazil_ListSongs_Handler,
		},
		{
			MethodName: "Search",
			Handler:    _Drazil_Search_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "spec/drazil.proto",
}
